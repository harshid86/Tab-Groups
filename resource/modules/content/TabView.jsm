/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// VERSION 1.1.1

XPCOMUtils.defineLazyModuleGetter(this, "PageThumbUtils", "resource://gre/modules/PageThumbUtils.jsm");

this.TabView = {
	// This module will only be initialized in frame scripts from windows that need it.
	moduleName: 'TabView',

	handleEvent: function(e) {
		let frame = e.currentTarget;

		switch(e.type) {
			// Sends a synchronous message when the "onDOMWillOpenModalDialog" event is fired right before a modal dialog will be opened by the current page.
			case 'DOMWillOpenModalDialog':
				// (e.isTrusted == true) when the event is generated by a user action and does not originate from a script.
				if(!e.isTrusted) { break; }

				// we're intentionally sending a synchronous message to handle this event as quickly as possible,
				// to switch the selected tab and hide the tabview before the modal dialog is shown
				Frames.message(frame, "DOMWillOpenModalDialog", undefined, undefined, true);
				break;

			case 'MozAfterPaint':
				// Sends an asynchronous message when the "onMozAfterPaint" event is fired.
				if(e.clientRects.length) {
					Frames.message(frame, "MozAfterPaint");
				}
				break;

			case 'timeupdate':
				// <video> may not fire paint events during playback.
				// fake paint events so we can still update thumbnails
				if(e.target.localName == "video") {
					Frames.message(frame, "MozAfterPaint");
				}
				break;
		}
	},

	receiveMessage: function(m) {
		let name = messageName(m);
		let frame = m.target;
		let content = frame.content;

		switch(name) {
			// Checks if the currently active document is loaded.
			case 'isDocumentLoaded': {
				let isLoaded = (content && content.document.readyState != "uninitialized" && !Frames.get(frame).WebProgress.nsI.isLoadingDocument);

				Frames.message(frame, 'isDocumentLoaded', isLoaded);
				break;
			}
			// Checks if the currently active document is an image document or not.
			case 'isImageDocument': {
				let isImageDocument = (content && content.document instanceof Ci.nsIImageDocument);

				Frames.message(frame, 'isImageDocument', isImageDocument);
				break;
			}
			case 'waitForDocumentLoad': {
				let waitForLoad = function() {
					content.removeEventListener("load", waitForLoad, true);
					Frames.message(frame, "documentLoaded");
				};
				content.addEventListener("load", waitForLoad, true);
				break;
			}
			case 'getContentSize': {
				let [ width, height ] = PageThumbUtils.getContentSize(content);
				Frames.message(frame, 'contentSize', { width, height });
				break;
			}
		}
	},

	onFrameAdded: function(frame) {
		frame.addEventListener("DOMWillOpenModalDialog", this);
		frame.addEventListener("MozAfterPaint", this);
		frame.addEventListener("timeupdate", this, true);

		Frames.listen(frame, "isDocumentLoaded", this);
		Frames.listen(frame, "isImageDocument", this);
		Frames.listen(frame, "waitForDocumentLoad", this);
		Frames.listen(frame, "getContentSize", this);
	},

	onFrameDeleted: function(frame) {
		frame.removeEventListener("DOMWillOpenModalDialog", this);
		frame.removeEventListener("MozAfterPaint", this);
		frame.removeEventListener("timeupdate", this, true);

		Frames.unlisten(frame, "isDocumentLoaded", this);
		Frames.unlisten(frame, "isImageDocument", this);
		Frames.unlisten(frame, "waitForDocumentLoad", this);
		Frames.unlisten(frame, "getContentSize", this);
	}
};

Modules.LOADMODULE = function() {
	Frames.register(TabView);
};

Modules.UNLOADMODULE = function() {
	Frames.unregister(TabView);
};
